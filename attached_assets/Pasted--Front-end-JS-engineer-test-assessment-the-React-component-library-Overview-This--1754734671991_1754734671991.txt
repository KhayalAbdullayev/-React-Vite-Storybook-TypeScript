# Front-end JS engineer test assessment - the React component library

## 🎯 **Overview**

This documentation outlines the steps to complete the test assessment for building a small **React component library** using **Storybook**. You will implement three reusable UI components with different states and props. The components should be displayed in **Storybook** with visual variations, and screenshots of those states should be included in the README.

## 🚀 Goal

Create a Storybook-based UI component system that includes:

- A smart `Input` component (multi-type, password visibility, clearable)
- A `Toast` notification component
- A nested `Sidebar Menu` with sliding animation

## 🧩 Steps to Complete the Assessment

### 1. **Initialize a React Project with Storybook**

- Use Vite, Create React App, or Next.js — your choice.
- Initialize Storybook (`npx storybook init`)
- Configure with TypeScript and default theme
- Don’t use component libraries

### 2. **Create the Following Components**

### 📥 **1. Input Component**

- Behavior:
    - If `type="password"`: display an eye icon to toggle visibility
    - If `clearable=true`: show a small "X" button to clear input
- Storybook:
    - Show examples for text, password (with toggle), number
    - With/without `clearable`

### 🔔 **2. Toast Component**

- Behavior:
    - Appears at the bottom right
    - Auto-dismisses after given duration
    - Includes transition (fade/slide)
- Storybook:
    - Variants for each `type`
    - Different durations
    - Optional manual close button

### 📚 **3. Sidebar Menu Component**

- Behavior:
    - Slides in from the right
    - Renders nested submenus (accordion or expandable)
    - Closes when background is clicked
- Storybook:
    - Render with 1-level and 2-level nested items
    - Open/closed states

### 3. **Add Storybook Stories**

- Add `.stories.tsx` files for each component
- Display multiple configurations of props
- Organize stories by folder/section (`Input`, `Feedback`, `Navigation`, etc.)

### 4. **Add Screenshots to README**

- In `README.md`, include screenshots of:
    - Each component in at least 2 states
    - Storybook UI displaying your components
- You can use macOS screenshot, Chrome dev tools, or [Storycap](https://storybook.js.org/addons/storycap)

## ⚙️ Development Guidelines

### Code Quality

- Use ESLint + Prettier
- TypeScript
- Use consistent formatting and naming
- Functional components with hooks

### Folder Structure (suggested)

```
src/
├── components/
│   ├── Input/
│   ├── Toast/
│   └── SidebarMenu/
├── stories/
└── index.ts

```

---

## 📦 Deliverables

- GitHub repo with all source code
- Storybook setup fully working locally (`npm run storybook`)
- `README.md` with:
    - Setup instructions
    - Component overview
    - **Screenshots of each component in multiple states**

## ✅ Bonus Points

- Add `@storybook/addon-controls` for live props editing
- Add animation with Framer Motion or CSS transitions
- Use `React Hook Form` in one of the stories (optional)

## 🧪 How We Review

We will look at:

- Code readability
- Component modularity
- Proper use of props
- Creative UI ideas
- Storybook usage and documentation

## 🔗 How to Submit

- Push your code to a **public GitHub repository**
- Include a clear `README.md` with **screenshots**
- Share the link with us for review